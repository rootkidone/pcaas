/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Adapter.GUIFrameworkAdapter;
import PublicClasses.CommandObject;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author rootkid
 */
public class GUIGeneric extends javax.swing.JPanel {

    /**
     * Creates new form GUIGeneric
     */
    private GUIFrameworkAdapter _adapter;
    private String _instance;
    private DefaultListModel _model;
    private List<String> _savedCommands = new ArrayList<String>();
    private int _commandCounter = 0;

    public GUIGeneric(String instance, GUIFrameworkAdapter adapter) {
        initComponents();
        this._adapter = adapter;
        this._instance = instance;
        //hier?
        OutputList.setLayoutOrientation(JList.VERTICAL);
        _model = new DefaultListModel();
        OutputList.setModel(_model);
    }

    public String getInstance() {
        return _instance;
    }

    public void showMessage(String message) {
        _model.addElement(message);
        int lastIndex = OutputList.getModel().getSize() - 1;
        if (lastIndex >= 0) {
            OutputList.ensureIndexIsVisible(lastIndex);
        }
        OutputList.repaint();
        OutputList.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabPanel = new javax.swing.JPanel();
        CommandTextField = new javax.swing.JTextField();
        AttributePanel = new javax.swing.JPanel();
        SaveOutputCheckBox = new javax.swing.JCheckBox();
        SaveOutputTextField = new javax.swing.JTextField();
        WorkDirectoryCheckBox = new javax.swing.JCheckBox();
        WorkDirectoryTextField = new javax.swing.JTextField();
        IntervalCheckBox = new javax.swing.JCheckBox();
        IntervalTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        CommandTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CommandTextFieldKeyReleased(evt);
            }
        });

        SaveOutputCheckBox.setText("save Output");
        SaveOutputCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SaveOutputCheckBoxItemStateChanged(evt);
            }
        });

        SaveOutputTextField.setEnabled(false);

        WorkDirectoryCheckBox.setText("Work Directory");
        WorkDirectoryCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                WorkDirectoryCheckBoxItemStateChanged(evt);
            }
        });

        WorkDirectoryTextField.setEnabled(false);

        IntervalCheckBox.setText("Interval (sec)");
        IntervalCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                IntervalCheckBoxItemStateChanged(evt);
            }
        });

        IntervalTextField.setText("5");
        IntervalTextField.setEnabled(false);

        javax.swing.GroupLayout AttributePanelLayout = new javax.swing.GroupLayout(AttributePanel);
        AttributePanel.setLayout(AttributePanelLayout);
        AttributePanelLayout.setHorizontalGroup(
            AttributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SaveOutputTextField)
            .addComponent(WorkDirectoryTextField)
            .addComponent(IntervalTextField)
            .addGroup(AttributePanelLayout.createSequentialGroup()
                .addGroup(AttributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaveOutputCheckBox)
                    .addComponent(WorkDirectoryCheckBox)
                    .addComponent(IntervalCheckBox))
                .addGap(0, 46, Short.MAX_VALUE))
        );
        AttributePanelLayout.setVerticalGroup(
            AttributePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttributePanelLayout.createSequentialGroup()
                .addComponent(SaveOutputCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveOutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WorkDirectoryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WorkDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntervalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntervalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(OutputList);

        javax.swing.GroupLayout MainTabPanelLayout = new javax.swing.GroupLayout(MainTabPanel);
        MainTabPanel.setLayout(MainTabPanelLayout);
        MainTabPanelLayout.setHorizontalGroup(
            MainTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainTabPanelLayout.createSequentialGroup()
                .addGroup(MainTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CommandTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AttributePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainTabPanelLayout.setVerticalGroup(
            MainTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainTabPanelLayout.createSequentialGroup()
                .addComponent(CommandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
            .addComponent(AttributePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        add(MainTabPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void CommandTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CommandTextFieldKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String command = CommandTextField.getText();
            String directory = WorkDirectoryTextField.getText();
            String saveOutput = SaveOutputTextField.getText();
            String interval = IntervalTextField.getText();

            if (!command.isEmpty() && !saveOutput.isEmpty()
                    && !interval.isEmpty()
                    && !directory.isEmpty()) {
                
                CommandObject commandObj = new CommandObject(_instance, directory,
                    command, true, true, saveOutput,"", Integer.parseInt(interval));
                
                _adapter.sendMessage(commandObj);
                CommandTextField.setText("");
                
                _savedCommands.add(command);
                _commandCounter = 0;
            }
            else{
              JOptionPane.showMessageDialog(MainTabPanel, "Please fill in the command box and all boxes on the right side");
            }
        }
        if(evt.getKeyCode() == KeyEvent.VK_UP && !_savedCommands.isEmpty() && _commandCounter <= _savedCommands.size()){
            CommandTextField.setText(_savedCommands.get(_savedCommands.size() - _commandCounter++));
        }
        if(evt.getKeyCode() == KeyEvent.VK_DOWN && !_savedCommands.isEmpty() && _commandCounter >= 0){
            CommandTextField.setText(_savedCommands.get(_savedCommands.size() - _commandCounter));
            _commandCounter--;
        }
    }//GEN-LAST:event_CommandTextFieldKeyReleased

    private void SaveOutputCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SaveOutputCheckBoxItemStateChanged
         SaveOutputTextField.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_SaveOutputCheckBoxItemStateChanged

    private void WorkDirectoryCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_WorkDirectoryCheckBoxItemStateChanged
        WorkDirectoryTextField.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_WorkDirectoryCheckBoxItemStateChanged

    private void IntervalCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_IntervalCheckBoxItemStateChanged
        IntervalTextField.setEnabled(evt.getStateChange() == ItemEvent.SELECTED);
    }//GEN-LAST:event_IntervalCheckBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AttributePanel;
    private javax.swing.JTextField CommandTextField;
    private javax.swing.JCheckBox IntervalCheckBox;
    private javax.swing.JTextField IntervalTextField;
    private javax.swing.JPanel MainTabPanel;
    private javax.swing.JList OutputList;
    private javax.swing.JCheckBox SaveOutputCheckBox;
    private javax.swing.JTextField SaveOutputTextField;
    private javax.swing.JCheckBox WorkDirectoryCheckBox;
    private javax.swing.JTextField WorkDirectoryTextField;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
